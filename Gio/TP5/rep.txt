Q1

On ne s'arrete pas si argc = 1 et on demande argv[1] se qui sous-entend que argc >1
Si il n'y a pas d'argument le programme affiche le msg d'erreur puis plante.
Correction: mettre un else qui encadre le reste de code

Q2

Pour le printf : inversion des entrer par rapport a l'affichage ( %s -> int et %d -> char* )
pour l'affichage ?: le pointeur chaine a été modifier (++) --> on tape pas o bonne endroit pour l'affichage !!

Q3

Les membre de struct timeval sont des long int et sont caster en long.
La taille des long n'est pas la méme selon que l'on se trouve sur 32 ou 64 bits
Il se peut donc que la valeur du long int dépasse la valeur max d'un long et induise un probleme sur une machine 32bits alors que non sur une machine 64bits

Q4

if (res = 0) -----> pas un test mais on change la valeur de res !!

Q5

Pas de verification du retour de malloc -> danger

Q6

On crée plus de 20 processus !!! -> pas de differentiation pére/fils -> le fils aussi refait des fork() !

Q7

Pire que Q6 -> chaque thread crée recommence la fontion de création de thread -> threadception !!!

Q8

???????????

Q9

Il se peut que après l'apelle du fork, le processus actif soit le fils dans ce cas il quite et genere le signal SIGCHLD qui apelle le signal handler du père puis relance celui-ci juste avant le pause() se qui le fait attendre un signal qui est deja arrivé.
correction : il faut s'assurer que le pére rentre en pause avant que le fils ne quite avec des moyens de synchronisation comme yield ou sleep pour endormir le fils et donné la main au père

Q10

Test de retour de malloc avant d'acceder au champs de la structures !!!

Q11

Free(pt) dans colimacon :o ?!
char * ????

Q12

Dans colimacon si error malloc alors perror OK mais pas de exit(1) mais return null -> dans le main utilisation sans verification de null
